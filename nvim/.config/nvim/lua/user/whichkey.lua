local status_ok, which_key = pcall(require, "which-key")
if not status_ok then
	return
end

which_key.add({
  { "<leader>D", "<cmd>lua require('telescope.builtin').diagnostics(require('telescope.themes').get_dropdown{previewer = false, bufnr = 0})<cr>", desc = "Document Diagnostics",           nowait = true, remap = false },
   { "<leader>F", "<cmd>Telescope grep_string<cr>", desc = "Find Matches", nowait = true, remap = false },
   { "<leader>L", group = "LSP", nowait = true, remap = false },
   { "<leader>LI", "<cmd>LspInstallInfo<cr>", desc = "Installer Info", nowait = true, remap = false },
   { "<leader>LS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols", nowait = true, remap = false },
   { "<leader>La", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action", nowait = true, remap = false },
   { "<leader>Lf", "<cmd>lua vim.lsp.buf.format({ async = true })<cr>", desc = "Format", nowait = true, remap = false },
   { "<leader>Li", "<cmd>LspInfo<cr>", desc = "Info", nowait = true, remap = false },
   { "<leader>Lj", "<cmd>lua vim.lsp.diagnostic.goto_next()<CR>", desc = "Next Diagnostic", nowait = true, remap = false },
   { "<leader>Lk", "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>", desc = "Prev Diagnostic", nowait = true, remap = false },
   { "<leader>Ll", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action", nowait = true, remap = false },
   { "<leader>Lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix", nowait = true, remap = false },
   { "<leader>Lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename", nowait = true, remap = false },
   { "<leader>Ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols", nowait = true, remap = false },
   { "<leader>a", "<cmd>Alpha<cr>", desc = "Alpha", nowait = true, remap = false },
   { "<leader>b", "<cmd>lua require('telescope.builtin').buffers(require('telescope.themes').get_dropdown{previewer = false})<cr>", desc = "Buffers", nowait = true, remap =                false },
   { "<leader>c", "<cmd>Bdelete!<CR>", desc = "Close Buffer", nowait = true, remap = false },
   { "<leader>d", "<cmd>lua vim.diagnostic.open_float()<cr>", desc = "Line Diagnostics", nowait = true, remap = false },
   { "<leader>e", "<cmd>NvimTreeToggle<cr>", desc = "Explorer", nowait = true, remap = false },
   { "<leader>f", "<cmd>Telescope live_grep<cr>", desc = "Find Text", nowait = true, remap = false },
   { "<leader>h", "<cmd>nohlsearch<CR>", desc = "No Highlight", nowait = true, remap = false },
   { "<leader>pc", "<cmd>PackerCompile<cr>", desc = "Compile", nowait = true, remap = false },
   { "<leader>pi", "<cmd>PackerInstall<cr>", desc = "Install", nowait = true, remap = false },
   { "<leader>ps", "<cmd>PackerSync<cr>", desc = "Sync", nowait = true, remap = false },
   { "<leader>pu", "<cmd>PackerUpdate<cr>", desc = "Update", nowait = true, remap = false },
   { "<leader>q", "<cmd>q!<CR>", desc = "Quit", nowait = true, remap = false },
   { "<leader>s", group = "Search", nowait = true, remap = false },
   { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands", nowait = true, remap = false },
   { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages", nowait = true, remap = false },
   { "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers", nowait = true, remap = false },
   { "<leader>sb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch", nowait = true, remap = false },
   { "<leader>sc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme", nowait = true, remap = false },
   { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help", nowait = true, remap = false },
   { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps", nowait = true, remap = false },
   { "<leader>sr", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File", nowait = true, remap = false },
   { "<leader>w", "<cmd>w!<CR>", desc = "Save", nowait = true, remap = false },
  { "<leader>icons", group = "", nowait = true, remap = false },
  { "<leader>iconsbreadcrumb", desc = "»", nowait = true, remap = false },
  { "<leader>iconsseparator", desc = "➜", nowait = true, remap = false },
  { "<leader>keys", desc = "Buffer Local Keymaps (which-key)", nowait = true, remap = false },
  { "<leader>keysscroll_down", desc = "<c-d>", nowait = true, remap = false },
  { "<leader>keysscroll_up", desc = "<c-u>", nowait = true, remap = false },
  { "<leader>layoutalign", desc = "left", nowait = true, remap = false },
  { "<leader>winborder", desc = "rounded", nowait = true, remap = false },
  { "<leader>winposition", desc = "bottom", nowait = true, remap = false },
})
